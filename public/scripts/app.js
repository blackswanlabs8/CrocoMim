// --- Utilities & state ---
const $ = sel => document.querySelector(sel);
const VIEWS = ['viewMenu','viewQuickGame','viewTeamSetup','viewTeamGame'];
let screen = 'viewMenu';
let qTimerId = null;
let tTimerId = null;
const backBtn = $('#btnBack');
const helpBtn = $('#btnHelp');
const modeQuickBtn = $('#modeQuick');
const themeSlider = $('#themeSlider');
const themeContainer = $('#themeContainer');
const headerTitle = $('.title');
const bodyEl = document.body;
const HELP_TEXT = [
  'üêä CrocoMim ‚Äî –∏–≥—Ä–∞ –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –º–∏–º–∏–∫–æ–π –∏ –∂–µ—Å—Ç–∞–º–∏.',
  '',
  '–†–µ–∂–∏–º—ã:',
  '‚ö° –ë—ã—Å—Ç—Ä—ã–π ‚Äî –æ–¥–∏–Ω –≤–µ–¥—É—â–∏–π, —Å—á—ë—Ç—á–∏–∫ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–∞–π–º–µ—Ä –∏ —Ü–µ–ª—å –ø–æ –æ—á–∫–∞–º.',
  'üë• –ö–æ–º–∞–Ω–¥–∞ ‚Äî –∫–æ–º–∞–Ω–¥—ã —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, –≤–µ–¥–∏—Ç–µ —Å—á—ë—Ç –æ—á–∫–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞.',
  '',
  '–ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
  '‚Ä¢ –°–ª–æ–≤–∞—Ä—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –ø–æ–¥–±–æ—Ä–∫—É —Å–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ¬´–°–≤–æ–π —Å–ª–æ–≤–∞—Ä—å¬ª.',
  '‚Ä¢ –°–≤–æ–π —Å–ª–æ–≤–∞—Ä—å ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º–∏.',
  '‚Ä¢ –¢–∞–π–º–µ—Ä ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ –∑–∞–¥–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞ —à–∞–≥–æ–º 30 —Å–µ–∫—É–Ω–¥.',
  '‚Ä¢ –û—á–∫–∏ –¥–æ –ø–æ–±–µ–¥—ã ‚Äî –∑–∞–¥–∞–π—Ç–µ —Ü–µ–ª—å –ø–æ –æ—á–∫–∞–º; –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å—á—ë—Ç –≤–∏–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.',
  '‚Ä¢ –¢–µ–º–∞ ‚Äî –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ —Å–≤–µ—Ç–ª—É—é –∏ —Ç—ë–º–Ω—É—é —Ç–µ–º—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.',
  '',
  '–ù–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞:',
  '‚Ä¢ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–∞–º—è—Ç–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´?¬ª –≤ —à–∞–ø–∫–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë —Å–Ω–æ–≤–∞.'
].join('\n');
const THEME_KEY = 'croc-theme';
const SCREEN_KEY = 'croc-screen';
const QUICK_STATS_KEY = 'croc-quick-stats';
const TEAM_STATS_KEY = 'croc-team-stats';

const applyTheme = mode => {
  const themeClass = mode === 'dark' ? 'theme-dark' : 'theme-light';
  bodyEl.classList.remove('theme-light','theme-dark');
  bodyEl.classList.add(themeClass);
  if (themeSlider) themeSlider.value = mode === 'dark' ? '1' : '0';
};
const readThemePref = () => {
  try{ return localStorage.getItem(THEME_KEY); }
  catch{ return null; }
};
const writeThemePref = mode => {
  try{ localStorage.setItem(THEME_KEY, mode); }
  catch{}
};
const readScreenPref = () => {
  try{ return localStorage.getItem(SCREEN_KEY); }
  catch{ return null; }
};
const writeScreenPref = value => {
  try{ localStorage.setItem(SCREEN_KEY, value); }
  catch{}
};
const readJson = (key, fallback) => {
  try{
    const raw = localStorage.getItem(key);
    if (!raw) return fallback;
    return JSON.parse(raw);
  }
  catch{ return fallback; }
};
const writeJson = (key, value) => {
  try{ localStorage.setItem(key, JSON.stringify(value)); }
  catch{}
};
const initialTheme = readThemePref();
applyTheme(initialTheme === 'dark' ? 'dark' : 'light');
if (themeSlider){
  themeSlider.addEventListener('input', e => {
    const mode = e.target.value === '1' ? 'dark' : 'light';
    applyTheme(mode);
    writeThemePref(mode);
  });
}

const DICTS = {
  easy:["–¥–æ–º","–∫–æ—Ç","—Å–æ–±–∞–∫–∞","–º—è—á","—Å—Ç–æ–ª","—Å—Ç—É–ª","–æ–∫–Ω–æ","–¥–≤–µ—Ä—å","–º–∞—à–∏–Ω–∞","—Ä—É—á–∫–∞","–∫–∞—Ä–∞–Ω–¥–∞—à","—Ç–µ—Ç—Ä–∞–¥—å","–ª–∞–º–ø–∞","–∫–Ω–∏–≥–∞","—Ç–µ–ª–µ—Ñ–æ–Ω","—á–∞—à–∫–∞","—Ç–∞—Ä–µ–ª–∫–∞","–ª–æ–∂–∫–∞","–≤–∏–ª–∫–∞","–Ω–æ–∂","—è–±–ª–æ–∫–æ","–±–∞–Ω–∞–Ω","—Ö–ª–µ–±","—Å—ã—Ä","–º–æ–ª–æ–∫–æ","—á–∞–π","–∫–æ—Ñ–µ","—Å–æ–∫","–≤–æ–¥–∞","—Ä—ã–±–∞","—Å–æ–ª—å","—Å–∞—Ö–∞—Ä","–º–∞—Å–ª–æ","—è–π—Ü–æ","–±–æ—Ç–∏–Ω–∫–∏","—à–∞–ø–∫–∞","–∫—É—Ä—Ç–∫–∞","–∑–æ–Ω—Ç","–æ—á–∫–∏","—á–∞—Å—ã","—Ñ—É—Ç–±–æ–ª","–≤–µ–ª–æ—Å–∏–ø–µ–¥","—Ä—é–∫–∑–∞–∫","–∫–∞—Ä—Ç–∞","–∫–ª—é—á","–∑–∞–º–æ–∫","–º–æ—Å—Ç","—É–ª–∏—Ü–∞","–ø–∞—Ä–∫","–ø–∞–ª—å—Ç–æ","—Å–≤–∏—Ç–µ—Ä","–Ω–æ—Å–∫–∏","–ø–µ—Ä—á–∞—Ç–∫–∏","—à–∞—Ä—Ñ","–ø–æ–µ–∑–¥","–∞–≤—Ç–æ–±—É—Å","—Å–∞–º–æ–ª—ë—Ç","–∫–æ—Ä–∞–±–ª—å","–¥–µ—Ä–µ–≤–æ","—Ü–≤–µ—Ç–æ–∫","—Ç—Ä–∞–≤–∞","—Ä–µ–∫–∞","–º–æ—Ä–µ","–≥–æ—Ä–∞","–æ–±–ª–∞–∫–æ","—Å–æ–ª–Ω—Ü–µ","–ª—É–Ω–∞","–∑–≤–µ–∑–¥–∞","–¥–æ–∂–¥—å","—Å–Ω–µ–≥","–≤–µ—Ç–µ—Ä","–≥—Ä–æ–º","–º–æ–ª–Ω–∏—è","–ø–µ—Å–æ–∫","–ø–ª—è–∂","–ø–µ—á–µ–Ω—å–µ","—Ç–æ—Ä—Ç","–∫–æ–Ω—Ñ–µ—Ç–∞","—à–æ–∫–æ–ª–∞–¥","–º–æ—Ä–æ–∑","—Ç–µ–ø–ª–æ","—Ö–æ–ª–æ–¥","–ª–µ—Ç–æ","–æ—Å–µ–Ω—å","–∑–∏–º–∞","–≤–µ—Å–Ω–∞","—Å—É–º–∫–∞","–∫—Ä–µ—Å–ª–æ","–¥–∏–≤–∞–Ω","–∫—Ä–æ–≤–∞—Ç—å","–ø–æ–¥—É—à–∫–∞","–æ–¥–µ—è–ª–æ","–∫–æ–≤—ë—Ä","–ø–æ–ª–∫–∞","–¥–æ—Å–∫–∞","–¥–≤–µ—Ä—Ü–∞"],
  medium:["–º—É–∑—ã–∫–∞–Ω—Ç","—Ç–∞–Ω—Ü–æ—Ä","—Ö—É–¥–æ–∂–Ω–∏–∫","–∞–∫—Ç—ë—Ä","—Ä–µ–∂–∏—Å—Å—ë—Ä","–±–∏–±–ª–∏–æ—Ç–µ–∫–∞","–º—É–∑–µ–π","—Ç–µ–∞—Ç—Ä","–∫–∏–Ω–æ","–∫–æ–Ω—Ü–µ—Ä—Ç","–æ—Ä–∫–µ—Å—Ç—Ä","—Å–∫—Ä–∏–ø–∫–∞","—Ç—Ä—É–±–∞","–±–∞—Ä–∞–±–∞–Ω","–ø–∏–∞–Ω–∏–Ω–æ","–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞","–∫–æ–º–ø—å—é—Ç–µ—Ä","–ø—Ä–∏–Ω—Ç–µ—Ä","–∏–Ω—Ç–µ—Ä–Ω–µ—Ç","–±—Ä–∞—É–∑–µ—Ä","–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫","–∏–Ω–∂–µ–Ω–µ—Ä","–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä","—Å—Ç—Ä–æ–∏—Ç–µ–ª—å","–º–µ—Ö–∞–Ω–∏–∫","–ø–∏–ª–æ—Ç","–ø–æ—á—Ç–∞–ª—å–æ–Ω","–ø–æ–≤–∞—Ä","–ø–µ–∫–∞—Ä—å","–ø–∞—Ä–∞—à—é—Ç","–∫–æ–º–ø–∞—Å","–º–∏–∫—Ä–æ—Ñ–æ–Ω","—Ç–µ–ª–µ—Å–∫–æ–ø","–º–∏–∫—Ä–æ—Å–∫–æ–ø","–º–∞—Å–∫–∞—Ä–∞–¥","–ø–æ—Ä—Ç—Ä–µ—Ç","—Å–∫—É–ª—å–ø—Ç—É—Ä–∞","–∫–∞—Ä–∏–∫–∞—Ç—É—Ä–∞","–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è","–º–∞—Ä—à—Ä—É—Ç","–∫–æ–º–µ—Ç–∞","–ø–ª–∞–Ω–µ—Ç–∞","–≥–∞–ª–∞–∫—Ç–∏–∫–∞","—Å–ø—É—Ç–Ω–∏–∫","–∫–æ—Å–º–æ–¥—Ä–æ–º","—Ä–∞–∫–µ—Ç–∞","–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç","–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è","–º–∞—Ä–∞—Ñ–æ–Ω","—ç—Å—Ç–∞—Ñ–µ—Ç–∞","—Ç—Ä–µ–∫","–ø–æ–ª–æ—Å–∞","—Å–∫–µ–π—Ç–±–æ—Ä–¥","—Å–∞–º–æ–∫–∞—Ç","—Ä–æ–ª–∏–∫–∏","–∫–∞–Ω–æ—ç","–ø–∞—Ä—É—Å","—è–∫–æ—Ä—å","–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä","–ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫","–ø–µ—à–µ—Ö–æ–¥","—Å–≤–µ—Ç–æ—Ñ–æ—Ä","–ø–µ—Ä–µ—Ö–æ–¥","—ç—Å–∫–∞–ª–∞—Ç–æ—Ä","—Ç—É—Ä–Ω–∏–∫–µ—Ç","–¥–∏–∞–ª–µ–∫—Ç","—Å—Ü–µ–Ω–∞—Ä–∏–π","–º–µ—Ç–∞—Ñ–æ—Ä–∞","–∏—Ä–æ–Ω–∏—è","–∞–ª–ª–µ–≥–æ—Ä–∏—è","–ø–∞—Ä–∞–¥–æ–∫—Å","—Ñ–æ—Ä–º—É–ª–∞","—Ç–µ–æ—Ä–µ–º–∞","–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è","—É—Ä–∞–≤–Ω–µ–Ω–∏–µ","—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑","–¥–∏–∞–≥—Ä–∞–º–º–∞","–≥—Ä–∞—Ñ–∏–∫","–∞–ª–≥–æ—Ä–∏—Ç–º","–∞—Ä—Ö–∏–≤","–ø—Ä–æ—Ç–æ–∫–æ–ª","—Å–µ—Ä–≤–µ—Ä","–∫–ª–∏–µ–Ω—Ç","–ø–∞—Ä–æ–ª—å","—à–∏—Ñ—Ä","–≤–æ–ª–æ–Ω—Ç—ë—Ä","—è—Ä–º–∞—Ä–∫–∞","–ø—Ä–∞–∑–¥–Ω–∏–∫","—Ñ–µ—Å—Ç–∏–≤–∞–ª—å","–∫–∞–ø–∏—Ç–∞–Ω","–∫–æ–º–∞–Ω–¥–∞","—Å—Ç—Ä–∞—Ç–µ–≥–∏—è","—Ç–∞–∫—Ç–∏–∫–∞","–∫–∞–ø–ª—è","—É–∑–æ—Ä"],
  hard:["–∞–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å","–∫–æ–Ω—Ñ–æ—Ä–º–∏–∑–º","–ø–∞—Ä–∞–¥–∏–≥–º–∞","–∫–∞—Ç–∞—Ä—Å–∏—Å","—ç–Ω—Ç—Ä–æ–ø–∏—è","–∞–ø–æ—Ñ–µ–Ω–∏—è","–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è","–¥–∏—Å—Å–æ—Ü–∏–∞—Ü–∏—è","–∫–æ–Ω—Å–µ–Ω—Å—É—Å","—Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º","—Ä–µ—Ñ–ª–µ–∫—Å–∏—è","–æ–Ω—Ç–æ–ª–æ–≥–∏—è","—ç–≤—Ä–∏—Å—Ç–∏–∫–∞","–≥–µ—Ä–º–µ–Ω–µ–≤—Ç–∏–∫–∞","–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å","–∏–º–ø–ª–∏–∫–∞—Ü–∏—è","–¥–µ–¥—É–∫—Ü–∏—è","–∏–Ω–¥—É–∫—Ü–∏—è","—Å—É–ø—Ä–µ–º–∞—Ç–∏–∑–º","—Å–∏–Ω–µ—Ä–≥–∏—è","–ø–∞–ª–∏–Ω–¥—Ä–æ–º","–æ–∫—Å—é–º–æ—Ä–æ–Ω","–º–µ—Ç–∞–º–æ—Ä—Ñ–æ–∑–∞","–∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ—Å—Ç—å","–¥–∏–∞—Ö—Ä–æ–Ω–∏—è","—Å–∏–Ω–µ–∫–¥–æ—Ö–∞","–∞–ª–ª–∏—Ç–µ—Ä–∞—Ü–∏—è","–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º","–ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è","–∫–æ–≥–µ–∑–∏—è","–∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å","—Å—É–±—Å—Ç–∞–Ω—Ü–∏—è","—Ç—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç–Ω–æ—Å—Ç—å","–∏–º–º–∞–Ω–µ–Ω—Ç–Ω–æ—Å—Ç—å","—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è","—Ä–µ–ª—è—Ç–∏–≤–∏–∑–º","—ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è","–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è","–∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞","–∞–∫—Å–∏–æ–º–∞","–ª–µ–º–º–∞","–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è","–¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è","—Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è","–∫–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è","–∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è","—Ñ–ª—É–∫—Ç—É–∞—Ü–∏—è","—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è","–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å","–∞—Å–∏–º–ø—Ç–æ—Ç–∞","–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è","–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è","–¥–∏—Å–ø–µ—Ä—Å–∏—è","–∫–æ–Ω—Ñ–∞–±—É–ª—è—Ü–∏—è","—ç–∫—Å–ø–ª–∏–∫–∞—Ü–∏—è","–∏–º–ø–µ–¥–∞–Ω—Å","—Ä–µ–∑–∏—Å—Ç–∏–≤–Ω–æ—Å—Ç—å","–∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","–∞–±–µ—Ä—Ä–∞—Ü–∏—è","–∞–¥–∏–∞–±–∞—Ç–∏—á–µ—Å–∫–∏–π","—ç–Ω—Ç–∞–ª—å–ø–∏—è","–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç","–∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è","–∞–≥—Ä–µ–≥–∞—Ü–∏—è","–∞–Ω–∞–ª–æ–≥–∏—è","–∞–Ω—Ç–∏–Ω–æ–º–∏—è","–∞–ø–æ—Ñ–µ–æ–∑","–∫–æ–Ω–≥—Ä—É—ç–Ω—Ç–Ω–æ—Å—Ç—å","–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è","–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä","–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è","—Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞","–≥–æ–º–æ–º–æ—Ä—Ñ–∏–∑–º","–∏–∑–æ–º–æ—Ä—Ñ–∏–∑–º","–±–∏–µ–∫—Ü–∏—è","–¥–∏—Ñ—Ñ—É–∑–∏—è","–∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è","—Å—É–±–ª–∏–º–∞—Ü–∏—è","–∞–¥—Å–æ—Ä–±—Ü–∏—è","–¥–µ—Å–æ—Ä–±—Ü–∏—è","—Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞","–∫–∞—Ç–∞–ª–∏–∑","–∏–Ω–≥–∏–±–∏—Ç–æ—Ä","—Ä–µ–∫—É—Ä—Å–∏—è","–∏—Ç–µ—Ä–∞—Ü–∏—è","—Ä–µ–≥—Ä–µ—Å—Å–∏—è","–º–∞—Ä–∫–æ–≤—Å–∫–∞—è —Ü–µ–ø—å","–≥—Ä–∞–¥–∏–µ–Ω—Ç","–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è","–ª–∞–ø–ª–∞—Å–∏–∞–Ω","–∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π","–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π"],
  films_series:["–¢–∏—Ç–∞–Ω–∏–∫","–ê–≤–∞—Ç–∞—Ä","–ú–∞—Ç—Ä–∏—Ü–∞","–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä","–ù–∞—á–∞–ª–æ","–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å","–î–∂–æ–∫–µ—Ä","–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü","–•–æ–±–±–∏—Ç","–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä","–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã","–ú–∞–Ω–¥–∞–ª–æ—Ä–µ—Ü","–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤","–î–æ–º –¥—Ä–∞–∫–æ–Ω–∞","–í–µ–¥—å–º–∞–∫","–®–µ—Ä–ª–æ–∫","–î–æ–∫—Ç–æ—Ä –•–∞—É—Å","–î—Ä—É–∑—å—è","–¢–µ–æ—Ä–∏—è –±–æ–ª—å—à–æ–≥–æ –≤–∑—Ä—ã–≤–∞","–û—Ñ–∏—Å","–ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞","–ó–µ–ª—ë–Ω–∞—è –º–∏–ª—è","–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø","1+1","–õ–∞-–ª–∞-–ª–µ–Ω–¥","–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü","–¢–∞–∫—Å–∏—Å—Ç","–û—Å—Ç—Ä–æ–≤ –ø—Ä–æ–∫–ª—è—Ç—ã—Ö","–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±","–°–µ–º—å","–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ","–ö–∏–ª –ë–∏–ª–ª","–û–¥–Ω–∞–∂–¥—ã –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ","–î—é–Ω–∞","–ë–µ–≥—É—â–∏–π –ø–æ –ª–µ–∑–≤–∏—é","–ß—É–∂–æ–π","–•–∏—â–Ω–∏–∫","–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä","–†–æ–±–æ–∫–æ–ø","–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫","–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫","–ú—Å—Ç–∏—Ç–µ–ª–∏","–ö–∞–ø–∏—Ç–∞–Ω –ê–º–µ—Ä–∏–∫–∞","–¢–æ—Ä","–ß–µ—Ä–Ω–∞—è –ø–∞–Ω—Ç–µ—Ä–∞","–°—Ç—Ä–∞–∂–∏ –ì–∞–ª–∞–∫—Ç–∏–∫–∏","–î—ç–¥–ø—É–ª","–õ–æ–∫–∏","–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ","–õ—É—á—à–µ –∑–≤–æ–Ω–∏—Ç–µ –°–æ–ª—É","–ù–∞—Ä–∫–æ—Å","–ü–∏–∫–∫–∏ –ë–ª–∞–π–Ω–¥–µ—Ä—Å","–í–∏–∫–∏–Ω–≥–∏","–ß—ë—Ä–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ","–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞","–ö–æ—Ä–æ–ª—å –õ–µ–≤","–ê–ª–ª–∞–¥–∏–Ω","–•–æ–ª–æ–¥–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ","–¢–∞–π–Ω–∞ –ö–æ–∫–æ","–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—É—à–µ–∫","–†–∞—Ç–∞—Ç—É–π","–í–ê–õ–õ¬∑–ò","–í–≤–µ—Ä—Ö","–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞","–ú–æ–∞–Ω–∞","–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è","–ò–Ω–¥–∏–∞–Ω–∞ –î–∂–æ–Ω—Å","–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞","–î–∂–µ–π–º—Å –ë–æ–Ω–¥","–®—Ä–µ–∫","–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä","–ö—É–Ω–≥-—Ñ—É –ü–∞–Ω–¥–∞","–ö–∞–∫ –ø—Ä–∏—Ä—É—á–∏—Ç—å –¥—Ä–∞–∫–æ–Ω–∞","–ì–ª–∞–¥–∏–∞—Ç–æ—Ä","–¢—Ä–æ—è","300 —Å–ø–∞—Ä—Ç–∞–Ω—Ü–µ–≤","–•—Ä–∞–±—Ä–æ–µ —Å–µ—Ä–¥—Ü–µ","–ú–∞—Ä—Å–∏–∞–Ω–∏–Ω","–í—ã–∂–∏–≤—à–∏–π","–ë–æ–ª—å—à–æ–π –∫—É—à","–ö–∞—Ä—Ç—ã, –¥–µ–Ω—å–≥–∏, –¥–≤–∞ —Å—Ç–≤–æ–ª–∞","–î–æ—Å—Ç–∞—Ç—å –Ω–æ–∂–∏","–ö–∏–Ω–≥—Å–º–∞–Ω","–î–∂–µ–Ω—Ç–ª—å–º–µ–Ω—ã","–ê—Ä–∫–µ–π–Ω","–ö–æ–±—Ä–∞ –ö–∞–π","–°–æ—Ç–Ω—è","–ö–æ–ª–µ—Å–æ –≤—Ä–µ–º–µ–Ω–∏","–§–∞—É–¥–∞","–û—Ñ–∏—Å (UK)"],
  geography:["–ï–≤—Ä–æ–ø–∞","–ê–∑–∏—è","–ê—Ñ—Ä–∏–∫–∞","–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞","–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞","–ê–≤—Å—Ç—Ä–∞–ª–∏—è","–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞","–†–æ—Å—Å–∏—è","–ú–æ—Å–∫–≤–∞","–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥","–°–®–ê","–í–∞—à–∏–Ω–≥—Ç–æ–Ω","–ù—å—é-–ô–æ—Ä–∫","–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å","–ö–∞–Ω–∞–¥–∞","–û—Ç—Ç–∞–≤–∞","–¢–æ—Ä–æ–Ω—Ç–æ","–ú–µ–∫—Å–∏–∫–∞","–ë—Ä–∞–∑–∏–ª–∏—è","–†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ","–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞","–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å","–ß–∏–ª–∏","–ü–µ—Ä—É","–õ–∏–º–∞","–ö–æ–ª—É–º–±–∏—è","–ë–æ–≥–æ—Ç–∞","–ì–µ—Ä–º–∞–Ω–∏—è","–ë–µ—Ä–ª–∏–Ω","–§—Ä–∞–Ω—Ü–∏—è","–ü–∞—Ä–∏–∂","–ò—Å–ø–∞–Ω–∏—è","–ú–∞–¥—Ä–∏–¥","–ò—Ç–∞–ª–∏—è","–†–∏–º","–ú–∏–ª–∞–Ω","–í–µ–Ω–µ—Ü–∏—è","–ü–∏–∑–∞","–ì—Ä–µ—Ü–∏—è","–ê—Ñ–∏–Ω—ã","–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è","–õ–æ–Ω–¥–æ–Ω","–ù–æ—Ä–≤–µ–≥–∏—è","–®–≤–µ—Ü–∏—è","–°—Ç–æ–∫–≥–æ–ª—å–º","–§–∏–Ω–ª—è–Ω–¥–∏—è","–•–µ–ª—å—Å–∏–Ω–∫–∏","–î–∞–Ω–∏—è","–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω","–ò—Å–ª–∞–Ω–¥–∏—è","–†–µ–π–∫—å—è–≤–∏–∫","–ü–æ–ª—å—à–∞","–í–∞—Ä—à–∞–≤–∞","–ß–µ—Ö–∏—è","–ü—Ä–∞–≥–∞","–ê–≤—Å—Ç—Ä–∏—è","–í–µ–Ω–∞","–®–≤–µ–π—Ü–∞—Ä–∏—è","–¶—é—Ä–∏—Ö","–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã","–ê–º—Å—Ç–µ—Ä–¥–∞–º","–ë–µ–ª—å–≥–∏—è","–ë—Ä—é—Å—Å–µ–ª—å","–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è","–õ–∏—Å—Å–∞–±–æ–Ω","–¢—É—Ä—Ü–∏—è","–°—Ç–∞–º–±—É–ª","–ê–Ω–∫–∞—Ä–∞","–ï–≥–∏–ø–µ—Ç","–ö–∞–∏—Ä","–ú–∞—Ä–æ–∫–∫–æ","–†–∞–±–∞—Ç","–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞","–ö–µ–π–ø—Ç–∞—É–Ω","–ù–∏–≥–µ—Ä–∏—è","–ê–±—É–¥–∂–∞","–ö–µ–Ω–∏—è","–ù–∞–π—Ä–æ–±–∏","–≠—Ñ–∏–æ–ø–∏—è","–ê–¥–¥–∏—Å-–ê–±–µ–±–∞","–ò–∑—Ä–∞–∏–ª—å","–ò–µ—Ä—É—Å–∞–ª–∏–º","–ò–æ—Ä–¥–∞–Ω–∏—è","–ê–º–º–∞–Ω","–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è","–≠—Ä-–†–∏—è–¥","–û–ê–≠","–î—É–±–∞–π","–ò–Ω–¥–∏—è","–î–µ–ª–∏","–ú—É–º–±–∞–∏","–ù–µ–ø–∞–ª","–ö–∞—Ç–º–∞–Ω–¥—É","–ö–∏—Ç–∞–π","–ü–µ–∫–∏–Ω","–í–µ–ª–∏–∫–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è —Å—Ç–µ–Ω–∞"],
  kids:["–º—è—á","–∫—É–∫–ª–∞","–º–∏—à–∫–∞","–∑–∞–π—á–∏–∫","—Å–æ–ª–Ω—ã—à–∫–æ","–æ–±–ª–∞–∫–æ","—Ä–∞–¥—É–≥–∞","—Å–Ω–µ–∂–∏–Ω–∫–∞","—Å–∞–Ω–∫–∏","–≤–∞—Ä–µ–∂–∫–∏","—à–∞–ø–∫–∞","—à–∞—Ä—Ñ","–º–∞—à–∏–Ω–∫–∞","–ø–∞—Ä–æ–≤–æ–∑","–ø–æ–µ–∑–¥","—Å–∞–º–æ–ª—ë—Ç","—Ä–∞–∫–µ—Ç–∞","–ª–æ–¥–∫–∞","–ø–∞—Ä—É—Å","–≤–µ–ª–æ—Å–∏–ø–µ–¥","—Å–∞–º–æ–∫–∞—Ç","–∫–∞—á–µ–ª–∏","–≥–æ—Ä–∫–∞","–∫–∞—Ä—É—Å–µ–ª—å","–∑–æ–æ–ø–∞—Ä–∫","—Ü–∏—Ä–∫","–ø–∞—Ä–∫","–∏–≥—Ä—É—à–∫–∞","–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä","–∫—É–±–∏–∫–∏","–ø–∞–∑–ª","—Ä–∞—Å–∫—Ä–∞—Å–∫–∞","—Ñ–ª–æ–º–∞—Å—Ç–µ—Ä","–∫–∞—Ä–∞–Ω–¥–∞—à","–∫–∏—Å—Ç–æ—á–∫–∞","–∫—Ä–∞—Å–∫–∏","–ø–ª–∞—Å—Ç–∏–ª–∏–Ω","–Ω–æ–∂–Ω–∏—Ü—ã","–∫–ª–µ–π","–∫–Ω–∏–∂–∫–∞","—Å–∫–∞–∑–∫–∞","–ø–µ—Å–Ω—è","—Ç–∞–Ω–µ—Ü","–º—É–∑—ã–∫–∞","–ø—Ä–∞–∑–¥–Ω–∏–∫","–ø–æ–¥–∞—Ä–æ–∫","—à–∞—Ä–∏–∫","—Ç–æ—Ä—Ç","—Å–≤–µ—á–∏","–ø–µ—á–µ–Ω—å–µ","–∫–æ–Ω—Ñ–µ—Ç–∞","—à–æ–∫–æ–ª–∞–¥","–º–æ—Ä–æ–∂–µ–Ω–æ–µ","—è–±–ª–æ–∫–æ","–±–∞–Ω–∞–Ω","–≥—Ä—É—à–∞","–∞–ø–µ–ª—å—Å–∏–Ω","–∫–ª—É–±–Ω–∏–∫–∞","–≤–∏—à–Ω—è","–∞—Ä–±—É–∑","–¥—ã–Ω—è","–º–æ—Ä–∫–æ–≤—å","–æ–≥—É—Ä–µ—Ü","–ø–æ–º–∏–¥–æ—Ä","—Å—É–ø","–∫–∞—à–∞","–∫–æ—Ç—ë–Ω–æ–∫","—â–µ–Ω–æ–∫","—Ö–æ–º—è–∫","—Ä—ã–±–∫–∞","—á–µ—Ä–µ–ø–∞—Ö–∞","–ª—è–≥—É—à–∫–∞","—É—Ç—ë–Ω–æ–∫","—Å–ª–æ–Ω","–∂–∏—Ä–∞—Ñ","–ª–µ–≤","—Ç–∏–≥—Ä","–∑–µ–±—Ä–∞","–ø–∞–Ω–¥–∞","–¥–æ–º–∏–∫","–∫—Ä–æ–≤–∞—Ç–∫–∞","–ø–æ–¥—É—à–∫–∞","–æ–¥–µ—è–ª–æ","–≤–∞–Ω–Ω–∞","–º—ã–ª–æ","—â—ë—Ç–∫–∞","–ø–∞—Å—Ç–∞","–ø–æ–ª–æ—Ç–µ–Ω—Ü–µ","–∫–æ–ª—è—Å–∫–∞","–º–∞–º–∞","–ø–∞–ø–∞","–±–∞–±—É—à–∫–∞","–¥–µ–¥—É—à–∫–∞","–±—Ä–∞—Ç","—Å–µ—Å—Ç—Ä–∞","–¥—Ä—É–≥","–ø–æ–¥—Ä—É–≥–∞","–ø—Ä—è—Ç–∫–∏","—Å–∞–ª–æ—á–∫–∏"]
};

const TEAM_ICONS = [
  {id:'sun', emoji:'üåû', bg:'linear-gradient(135deg,#fde047,#f97316)', color:'#1f2937'},
  {id:'rocket', emoji:'üöÄ', bg:'linear-gradient(135deg,#60a5fa,#2563eb)', color:'#0f172a'},
  {id:'leaf', emoji:'üçÄ', bg:'linear-gradient(135deg,#86efac,#22c55e)', color:'#052e16'},
  {id:'wave', emoji:'üê¨', bg:'linear-gradient(135deg,#67e8f9,#0ea5e9)', color:'#0f172a'},
  {id:'crown', emoji:'üëë', bg:'linear-gradient(135deg,#fcd34d,#a855f7)', color:'#312e81'},
  {id:'gamepad', emoji:'üéÆ', bg:'linear-gradient(135deg,#f472b6,#a855f7)', color:'#1e1b4b'},
  {id:'bolt', emoji:'‚ö°', bg:'linear-gradient(135deg,#f97316,#ef4444)', color:'#111827'},
  {id:'snow', emoji:'‚ùÑÔ∏è', bg:'linear-gradient(135deg,#bfdbfe,#60a5fa)', color:'#1e3a8a'}
];
const defaultTeamName = idx => `–ö–æ–º–∞–Ω–¥–∞ ${idx+1}`;
const makeTeam = (name, icon) => ({name, icon, points:0, hit:0, miss:0, hitWords:[], missWords:[]});
const getTeamIcon = id => TEAM_ICONS.find(icon=>icon.id===id) || TEAM_ICONS[0];
function sanitizeTeam(team, idx){
  const base = makeTeam(defaultTeamName(idx), TEAM_ICONS[idx % TEAM_ICONS.length].id);
  const name = typeof team?.name === 'string' && team.name.trim() ? team.name.trim() : base.name;
  const iconId = TEAM_ICONS.some(icon=>icon.id === team?.icon) ? team.icon : base.icon;
  const toCount = value => Number.isFinite(value) ? Math.trunc(value) : 0;
  return {
    name,
    icon: iconId,
    points: toCount(team?.points),
    hit: toCount(team?.hit),
    miss: toCount(team?.miss),
    hitWords: Array.isArray(team?.hitWords) ? [...team.hitWords] : [],
    missWords: Array.isArray(team?.missWords) ? [...team.missWords] : []
  };
}
let teams = [];
const storedTeams = readJson(TEAM_STATS_KEY, null);
if (Array.isArray(storedTeams) && storedTeams.length){
  teams = storedTeams.map((team, idx)=>sanitizeTeam(team, idx));
}
const persistTeams = () => {
  teams = teams.map((team, idx)=>sanitizeTeam(team, idx));
  writeJson(TEAM_STATS_KEY, teams);
};
let audioCtx = null;
function ensureAudioCtx(){
  try{
    const AudioCtx = window.AudioContext || window.webkitAudioContext;
    if (!AudioCtx) return null;
    if (!audioCtx) audioCtx = new AudioCtx();
    if (audioCtx.state === 'suspended') audioCtx.resume();
    return audioCtx;
  }catch{
    return null;
  }
}
function playAlarm(){
  const ctx = ensureAudioCtx();
  if (!ctx) return;
  const now = ctx.currentTime;
  [0, 0.35, 0.7].forEach((offset, idx)=>{
    const osc = ctx.createOscillator();
    const gain = ctx.createGain();
    osc.type = 'sine';
    const startFreq = idx === 0 ? 880 : 660;
    const endFreq = idx === 0 ? 660 : 520;
    osc.frequency.setValueAtTime(startFreq, now + offset);
    osc.frequency.exponentialRampToValueAtTime(endFreq, now + offset + 0.28);
    gain.gain.setValueAtTime(0.0001, now + offset);
    gain.gain.exponentialRampToValueAtTime(0.22, now + offset + 0.02);
    gain.gain.exponentialRampToValueAtTime(0.0001, now + offset + 0.32);
    osc.connect(gain).connect(ctx.destination);
    osc.start(now + offset);
    osc.stop(now + offset + 0.36);
  });
}
function playTick(){
  const ctx = ensureAudioCtx();
  if (!ctx) return;
  const now = ctx.currentTime;
  const osc = ctx.createOscillator();
  const gain = ctx.createGain();
  osc.type = 'triangle';
  osc.frequency.setValueAtTime(1200, now);
  osc.frequency.exponentialRampToValueAtTime(700, now + 0.12);
  gain.gain.setValueAtTime(0.0001, now);
  gain.gain.exponentialRampToValueAtTime(0.18, now + 0.02);
  gain.gain.exponentialRampToValueAtTime(0.0001, now + 0.18);
  osc.connect(gain).connect(ctx.destination);
  osc.start(now);
  osc.stop(now + 0.2);
}

// Navigation
const show = v => {
  VIEWS.forEach(id=>{
    const el = $('#'+id);
    if (el) el.style.display='none';
  });
  $('#'+v).style.display='flex';
  screen = v;
  writeScreenPref(v);
  window.scrollTo(0, 0);
  if (themeContainer) themeContainer.style.display = v === 'viewMenu' ? 'flex' : 'none';
  if (headerTitle) headerTitle.style.display = v === 'viewMenu' ? 'flex' : 'none';
  if (v==='viewMenu'){
    backBtn.style.visibility = 'hidden';
    backBtn.style.pointerEvents = 'none';
    if (modeQuickBtn) modeQuickBtn.classList.add('active');
  }else{
    backBtn.style.visibility = 'visible';
    backBtn.style.pointerEvents = 'auto';
    if (modeQuickBtn) modeQuickBtn.classList.remove('active');
  }
};

// Header buttons
backBtn.onclick = () => {
  if (screen==='viewQuickGame' || screen==='viewTeamGame'){
    if (!confirm('–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é? –¢–µ–∫—É—â–∞—è –ø–∞—Ä—Ç–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')) return;
  }
  if (typeof qTimerId !== 'undefined'){ clearInterval(qTimerId); qTimerId=null; }
  if (typeof tTimerId !== 'undefined'){ clearInterval(tTimerId); tTimerId=null; }
  show('viewMenu');
};
helpBtn.onclick = () => {
  alert(HELP_TEXT);
};

$('#goTeam').onclick = () => {
  ensureTeamsSeed();
  renderTeams();
  syncTeamSettingsFromMenu();
  show('viewTeamSetup');
};

// Quick setup
const qs = {
  dict: $('#quickDict'),
  customBox: $('#quickCustomBox'),
  customText: $('#quickCustomWords'),
  timerToggle: $('#quickTimerToggle'),
  time: 60,
  timeMinus: $('#quickTimeMinus'),
  timePlus: $('#quickTimePlus'),
  timeLabel: $('#quickTimeLabel'),
  ptsToggle: $('#quickPtsToggle'),
  ptsControls: $('#quickPtsControls'),
  pts: 10,
  ptsMinus: $('#quickPtsMinus'),
  ptsPlus: $('#quickPtsPlus'),
  ptsLabel: $('#quickPtsLabel'),
  start: $('#startQuick')
};
const upQuickTime = () => qs.timeLabel.textContent = qs.time+' —Å';
const upQuickPts = () => qs.ptsLabel.textContent = qs.pts;
upQuickTime();
upQuickPts();
qs.timerToggle.checked = false;
qs.ptsToggle.checked = false;
const updateQuickTimerUI = () => {
  if (!qs.timerToggle) return;
  const enabled = qs.timerToggle.checked;
  [qs.timeMinus, qs.timePlus].forEach(btn=>{ if (btn) btn.disabled = !enabled; });
  if (qs.timeLabel) qs.timeLabel.classList.toggle('disabled', !enabled);
};
qs.timeMinus.onclick = () => { qs.time = Math.max(30, qs.time-30); upQuickTime(); };
qs.timePlus.onclick = () => { qs.time += 30; upQuickTime(); };
qs.dict.onchange = () => qs.customBox.style.display = (qs.dict.value==='custom')?'block':'none';
qs.ptsMinus.onclick = () => { qs.pts = Math.max(1, qs.pts-1); upQuickPts(); };
qs.ptsPlus.onclick = () => { qs.pts += 1; upQuickPts(); };
const updateQuickPts = () => {
  if (!qs.ptsControls) return;
  const enabled = qs.ptsToggle.checked;
  qs.ptsControls.classList.toggle('is-disabled', !enabled);
  qs.ptsControls.setAttribute('aria-disabled', String(!enabled));
  [qs.ptsMinus, qs.ptsPlus].forEach(btn=>{ if (btn) btn.disabled = !enabled; });
  if (qs.ptsLabel) qs.ptsLabel.classList.toggle('disabled', !enabled);
};
if (qs.timerToggle) qs.timerToggle.onchange = updateQuickTimerUI;
updateQuickTimerUI();
qs.ptsToggle.onchange = updateQuickPts;
updateQuickPts();
if (qs.dict){
  qs.dict.value = 'medium';
  qs.dict.dispatchEvent(new Event('change'));
}

// Quick game state
const initialQuickStats = readJson(QUICK_STATS_KEY, {hitWords:[], missWords:[]}) || {hitWords:[], missWords:[]};
let qHitWords = Array.isArray(initialQuickStats.hitWords) ? [...initialQuickStats.hitWords] : [];
let qMissWords = Array.isArray(initialQuickStats.missWords) ? [...initialQuickStats.missWords] : [];
let qWords=[], qIndex=0, qHide=false, qRemain=0, qHit=qHitWords.length, qMiss=qMissWords.length, qTarget=null;

const qUI = {
  word: $('#qWord'),
  hit: $('#qHit'), miss: $('#qMiss'),
  next: $('#qNext'), hitBtn: $('#qHitBtn'), skipBtn: $('#qSkipBtn'),
  hideBtn: $('#qHideBtn'), meaningBtn: $('#qMeaningBtn'),
  tBox: $('#qTimerBox'), tLabel: $('#qTimer'),
  statsBtn: $('#qStatsBtn')
};

const updateQuickCounters = () => {
  if (qUI.hit) qUI.hit.textContent = String(qHit);
  if (qUI.miss) qUI.miss.textContent = String(qMiss);
};
const persistQuickStats = () => {
  writeJson(QUICK_STATS_KEY, {
    hitWords: qHitWords,
    missWords: qMissWords
  });
};
updateQuickCounters();

const pad = n => String(n).padStart(2,'0');
const formatWordList = list => list.length ? list.join(', ') : '‚Äî';
const parseCustomWords = raw => (raw || '')
  .split(/[,\n\r]+/)
  .map(s=>s.trim())
  .filter(Boolean);

function showWordStats(title, hitList, missList){
  alert(`${title}\n\n–£–≥–∞–¥–∞–Ω–Ω—ã–µ (${hitList.length}):\n${formatWordList(hitList)}\n\n–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ (${missList.length}):\n${formatWordList(missList)}`);
}

function startQuickGame(){
  // build words
  let dictKey = qs.dict.value;
  if (!dictKey || (!DICTS[dictKey] && dictKey!=='custom')){
    dictKey = 'medium';
    if (qs.dict){
      qs.dict.value = 'medium';
      qs.dict.dispatchEvent(new Event('change'));
    }
  }
  if (dictKey==='custom'){
    qWords = parseCustomWords(qs.customText?.value);
  }else{
    qWords = [...DICTS[dictKey]];
  }
  if (qWords.length===0){ alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ'); return; }
  shuffle(qWords);
  qIndex=0; qHide=false; qHit=0; qMiss=0; qTarget = qs.ptsToggle.checked ? qs.pts : null;
  qHitWords = [];
  qMissWords = [];
  persistQuickStats();
  updateQuickCounters();
  qUI.word.textContent = qWords[qIndex];
  qUI.hideBtn.textContent = '–°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ';

  // timer
  clearInterval(qTimerId); qTimerId=null;
  if (qs.timerToggle.checked){
    qUI.tBox.style.display='inline-flex';
    qRemain = qs.time;
    qUI.tLabel.textContent = `${pad(Math.floor(qRemain/60))}:${pad(qRemain%60)}`;
    qTimerId = setInterval(()=>{
      qRemain--;
      if (qRemain<=0){
        qUI.tLabel.textContent = '00:00';
        clearInterval(qTimerId); qTimerId=null;
        playAlarm();
        nextWord();
      }else{
        qUI.tLabel.textContent = `${pad(Math.floor(qRemain/60))}:${pad(qRemain%60)}`;
        if (qRemain <= 10){
          playTick();
        }
      }
    },1000);
  }else{
    qUI.tBox.style.display='none';
  }
  show('viewQuickGame');
}
$('#startQuick').onclick = startQuickGame;
if (modeQuickBtn) modeQuickBtn.onclick = startQuickGame;

function nextWord(){
  qIndex = (qIndex+1) % qWords.length;
  qHide=false;
  qUI.word.textContent = qWords[qIndex];
  qUI.hideBtn.textContent = '–°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ';
}

qUI.next.onclick = nextWord;
qUI.hitBtn.onclick = ()=>{
  qHit++;
  const current = qWords[qIndex];
  if (current) qHitWords.push(current);
  persistQuickStats();
  updateQuickCounters();
  if (qTarget!==null && qHit>=qTarget){
    if (qTimerId){ clearInterval(qTimerId); qTimerId=null; }
    playAlarm();
    alert('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!');
    show('viewMenu');
    return;
  }
  nextWord();
};
qUI.skipBtn.onclick = ()=>{
  const current = qWords[qIndex];
  if (current) qMissWords.push(current);
  qMiss++;
  persistQuickStats();
  updateQuickCounters();
  nextWord();
};
qUI.hideBtn.onclick = ()=>{
  qHide = !qHide;
  qUI.word.textContent = qHide ? '‚Ä¢‚Ä¢‚Ä¢' : qWords[qIndex];
  qUI.hideBtn.textContent = qHide ? '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ' : '–°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ';
};
qUI.meaningBtn.onclick = ()=> window.open('https://ru.wikipedia.org/wiki/'+encodeURIComponent(qWords[qIndex]), '_blank');
if (qUI.statsBtn){
  qUI.statsBtn.onclick = ()=>{
    showWordStats('–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º', qHitWords, qMissWords);
  };
}

// Team setup & game
function ensureTeamsSeed(){
  if (teams.length===0){
    teams = [
      makeTeam(defaultTeamName(0), TEAM_ICONS[0].id),
      makeTeam(defaultTeamName(1), TEAM_ICONS[1].id)
    ];
  } else {
    teams = teams.map((team, idx)=>sanitizeTeam(team, idx));
  }
  persistTeams();
}
const teamList = $('#teamList');
function renderTeams(){
  teamList.innerHTML='';
  teams.forEach((team, index)=>{
    if (!team.name) team.name = defaultTeamName(index);
    if (!team.icon) team.icon = TEAM_ICONS[index % TEAM_ICONS.length].id;
    const iconDef = getTeamIcon(team.icon);
    const card=document.createElement('div');
    card.className='section team-card';
    card.innerHTML = `
      <div class="team-card-top">
        <button class="team-avatar-btn" type="button" style="background:${iconDef.bg};color:${iconDef.color}" data-index="${index}">
          <span>${iconDef.emoji}</span>
        </button>
      </div>
      <div class="team-body">
        <div class="team-name"></div>
        <form class="team-edit" data-team-form>
          <label class="visually-hidden" for="teamName-${index}">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</label>
          <input class="input team-edit-input" id="teamName-${index}" name="teamName" type="text" maxlength="40" autocomplete="off">
          <div class="team-edit-actions">
            <button class="btn btn-small" type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button class="btn ghost btn-small" type="button" data-cancel>–û—Ç–º–µ–Ω–∞</button>
          </div>
        </form>
        <button class="team-delete" type="button" title="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É" data-index="${index}">üóëÔ∏è</button>
      </div>`;
    const nameLabel = card.querySelector('.team-name');
    if (nameLabel) nameLabel.textContent = team.name;
    const editForm = card.querySelector('[data-team-form]');
    const input = card.querySelector('.team-edit-input');
    if (input) input.value = team.name;
    const avatarBtn = card.querySelector('.team-avatar-btn');
    if (avatarBtn){
      avatarBtn.setAttribute('aria-label', `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ¬´${team.name || defaultTeamName(index)}¬ª`);
      avatarBtn.onclick = () => {
        if (card.classList.contains('is-editing')){
          card.classList.remove('is-editing');
          const currentName = teams[index]?.name || defaultTeamName(index);
          if (input) input.value = currentName;
          if (nameLabel) nameLabel.textContent = currentName;
          return;
        }
        const current = teams[index]?.name || defaultTeamName(index);
        if (input) input.value = current;
        card.classList.add('is-editing');
        requestAnimationFrame(()=>{
          if (input){
            input.focus();
            input.select();
          }
        });
      };
    }
    if (editForm && input){
      editForm.onsubmit = evt => {
        evt.preventDefault();
        const next = input.value.trim();
        teams[index].name = next || defaultTeamName(index);
        renderTeams();
        persistTeams();
      };
      input.addEventListener('keydown', evt => {
        if (evt.key === 'Escape'){
          evt.preventDefault();
          card.classList.remove('is-editing');
          const currentName = teams[index]?.name || defaultTeamName(index);
          input.value = currentName;
          if (nameLabel) nameLabel.textContent = currentName;
        }
      });
      const cancelBtn = editForm.querySelector('[data-cancel]');
      if (cancelBtn){
        cancelBtn.onclick = () => {
          card.classList.remove('is-editing');
          const currentName = teams[index]?.name || defaultTeamName(index);
          input.value = currentName;
          if (nameLabel) nameLabel.textContent = currentName;
        };
      }
    }
    const deleteBtn = card.querySelector('.team-delete');
    if (deleteBtn){
      deleteBtn.setAttribute('aria-label', `–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´${team.name || defaultTeamName(index)}¬ª`);
      deleteBtn.onclick = () => {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´${team.name || defaultTeamName(index)}¬ª?`)) return;
        teams.splice(index, 1);
        renderTeams();
        persistTeams();
      };
    }
    teamList.appendChild(card);
  });
}
$('#teamAdd').onclick = ()=>{
  const icon = TEAM_ICONS[teams.length % TEAM_ICONS.length].id;
  teams.push(makeTeam(defaultTeamName(teams.length), icon));
  renderTeams();
  persistTeams();
};

const ts = {
  dict: $('#teamDict'),
  customBox: $('#teamCustomBox'),
  customText: $('#teamCustomWords'),
  timerToggle: $('#teamTimerToggle'),
  time: 60,
  timeMinus: $('#teamTimeMinus'),
  timePlus: $('#teamTimePlus'),
  timeLabel: $('#teamTimeLabel'),
  ptsToggle: $('#teamPtsToggle'),
  ptsControls: $('#ptsControls'),
  pts: 10, ptsMinus: $('#ptsMinus'), ptsPlus: $('#ptsPlus'), ptsLabel: $('#ptsLabel')
};
const upTeamTime = () => ts.timeLabel.textContent = ts.time+' —Å';
const upPts = () => ts.ptsLabel.textContent = ts.pts;
upTeamTime(); upPts();
ts.timeMinus.onclick = ()=>{ ts.time = Math.max(30, ts.time-30); upTeamTime(); };
ts.timePlus.onclick = ()=>{ ts.time += 30; upTeamTime(); };
ts.ptsMinus.onclick = ()=>{ ts.pts = Math.max(1, ts.pts-1); upPts(); };
ts.ptsPlus.onclick = ()=>{ ts.pts += 1; upPts(); };
ts.dict.onchange = ()=> ts.customBox.style.display = (ts.dict.value==='custom')?'block':'none';
const updateTeamTimerUI = ()=>{
  if (!ts.timerToggle) return;
  const enabled = ts.timerToggle.checked;
  [ts.timeMinus, ts.timePlus].forEach(btn=>{ if (btn) btn.disabled = !enabled; });
  if (ts.timeLabel) ts.timeLabel.classList.toggle('disabled', !enabled);
};
const updatePtsUI = ()=>{
  const enabled = ts.ptsToggle.checked;
  if (ts.ptsControls){
    ts.ptsControls.classList.toggle('is-disabled', !enabled);
    ts.ptsControls.setAttribute('aria-disabled', String(!enabled));
  }
  [ts.ptsMinus, ts.ptsPlus].forEach(btn=>{ if (btn) btn.disabled = !enabled; });
  if (ts.ptsLabel) ts.ptsLabel.classList.toggle('disabled', !enabled);
};
if (ts.timerToggle) ts.timerToggle.onchange = updateTeamTimerUI;
updateTeamTimerUI();
ts.ptsToggle.onchange = updatePtsUI;
updatePtsUI();

function syncTeamSettingsFromMenu(){
  if (!qs || !ts) return;
  if (qs.dict && ts.dict){
    const dictValue = qs.dict.value || 'medium';
    ts.dict.value = dictValue;
    ts.dict.dispatchEvent(new Event('change'));
    if (dictValue === 'custom' && ts.customText && qs.customText){
      ts.customText.value = qs.customText.value;
    }
  }
  if (typeof qs.time === 'number'){
    ts.time = qs.time;
    upTeamTime();
  }
  if (ts.timerToggle && qs.timerToggle){
    ts.timerToggle.checked = qs.timerToggle.checked;
    updateTeamTimerUI();
  }
  if (typeof qs.pts === 'number'){
    ts.pts = qs.pts;
    upPts();
  }
  if (ts.ptsToggle && qs.ptsToggle){
    ts.ptsToggle.checked = qs.ptsToggle.checked;
  }
  updatePtsUI();
}

// Team game state
let tWords=[], tIndex=-1, tHide=false, tRemain=0, turn=0, roundActive=false, timerExpired=false;
let teamTimerEnabled = false;
let teamPointsEnabled = false;
let teamPointGoal = 10;

const tUI = {
  word: $('#tWord'),
  turnName: $('#turnTeamName'),
  tBox: $('#tTimerBox'), tLabel: $('#tTimer'),
  table: $('#scoreTable'),
  next: $('#tNext'), hit: $('#tHitBtn'), skip: $('#tSkipBtn'),
  hideBtn: $('#tHideBtn'), meaning: $('#tMeaningBtn'),
  startRound: $('#tStartRound'), endRound: $('#tEndRound'),
  status: $('#tRoundStatus'),
  statsBtn: $('#tStatsBtn')
};

function updateTurnHeader(){
  if (!teams[turn]) return;
  const current = teams[turn];
  const iconDef = getTeamIcon(current.icon);
  tUI.turnName.innerHTML = `<span class="team-chip-icon">${iconDef.emoji}</span>${escapeHtml(current.name || defaultTeamName(turn))}`;
}

function renderScore(){
  tUI.table.innerHTML='';
  teams.forEach((team, idx)=>{
    const iconDef = getTeamIcon(team.icon);
    const row=document.createElement('div');
    row.className='row';
    row.innerHTML = `
      <div class="chip team-chip" style="min-width:160px">
        <span class="team-chip-icon">${iconDef.emoji}</span>
        ${escapeHtml(team.name || defaultTeamName(idx))}
      </div>
      <div class="chip">–£–≥–∞–¥–∞–Ω–æ: ${team.hit}</div>
      <div class="chip">–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${team.miss}</div>
      ${teamPointsEnabled ? `<div class="chip">–û—á–∫–∏: ${team.points}</div>` : ''}`;
    tUI.table.appendChild(row);
  });
}

function setRoundControlsEnabled(enabled){
  [tUI.next, tUI.hit, tUI.skip, tUI.hideBtn, tUI.meaning].forEach(btn=>{
    if (btn){
      btn.disabled = !enabled;
    }
  });
}

function resetWordView(){
  tHide = false;
  if (tUI.word) tUI.word.textContent = '‚Äî';
  if (tUI.hideBtn) tUI.hideBtn.textContent = '–°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ';
}

function advanceWord(){
  if (!tWords.length) return;
  tIndex = (tIndex + 1) % tWords.length;
  tHide = false;
  if (tUI.word) tUI.word.textContent = tWords[tIndex];
  if (tUI.hideBtn) tUI.hideBtn.textContent = '–°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ';
}

function setStatus(text){
  if (tUI.status) tUI.status.textContent = text;
}

function preRoundMessage(name, initial){
  if (!name) return;
  if (initial){
    setStatus(`–ö–æ–º–∞–Ω–¥–∞ ¬´${name}¬ª, –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥¬ª.`);
  }else{
    setStatus(`–•–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥–µ ¬´${name}¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥¬ª.`);
  }
}

function startTeamGame(){
  if (teams.length<2){ alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã'); return; }
  let dictKey = ts.dict.value;
  if (!dictKey || (!DICTS[dictKey] && dictKey !== 'custom')){
    dictKey = 'medium';
    if (ts.dict){
      ts.dict.value = 'medium';
      ts.dict.dispatchEvent(new Event('change'));
    }
  }
  if (dictKey==='custom'){
    tWords = parseCustomWords(ts.customText?.value);
  }else{
    tWords = [...DICTS[dictKey]];
  }
  if (tWords.length===0){ alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ'); return; }
  shuffle(tWords);
  teams = teams.map((t, idx)=>(
    {
      name: t.name || defaultTeamName(idx),
      icon: t.icon || TEAM_ICONS[idx % TEAM_ICONS.length].id,
      points:0,
      hit:0,
      miss:0,
      hitWords:[],
      missWords:[]
    }
  ));
  persistTeams();
  tIndex=-1; tHide=false; turn=0; roundActive=false; timerExpired=false;
  teamTimerEnabled = !!ts.timerToggle?.checked;
  teamPointsEnabled = !!ts.ptsToggle?.checked;
  teamPointGoal = ts.pts;
  renderScore();
  updateTurnHeader();
  resetWordView();
  setRoundControlsEnabled(false);
  clearInterval(tTimerId); tTimerId=null;
  if (teamTimerEnabled){
    tUI.tBox.style.display='inline-flex';
    tRemain = ts.time;
    tUI.tLabel.textContent = `${pad(Math.floor(tRemain/60))}:${pad(tRemain%60)}`;
  }else{
    tUI.tBox.style.display='none';
  }
  if (tUI.startRound){
    tUI.startRound.style.display='inline-flex';
    tUI.startRound.disabled=false;
  }
  if (tUI.endRound){
    tUI.endRound.style.display='none';
  }
  const currentName = teams[turn]?.name || defaultTeamName(turn);
  preRoundMessage(currentName, true);
  show('viewTeamGame');
}
$('#startTeam').onclick = startTeamGame;

function beginRound(){
  if (roundActive) return;
  roundActive=true;
  timerExpired=false;
  setRoundControlsEnabled(true);
  if (tUI.startRound){
    tUI.startRound.style.display='none';
  }
  if (tUI.endRound){
    tUI.endRound.style.display='inline-flex';
    tUI.endRound.disabled=false;
  }
  const currentName = teams[turn]?.name || defaultTeamName(turn);
  setStatus(`–•–æ–¥ –∫–æ–º–∞–Ω–¥—ã ¬´${currentName}¬ª`);
  clearInterval(tTimerId); tTimerId=null;
  if (teamTimerEnabled){
    tUI.tBox.style.display='inline-flex';
    tRemain = ts.time;
    tUI.tLabel.textContent = `${pad(Math.floor(tRemain/60))}:${pad(tRemain%60)}`;
    tTimerId = setInterval(()=>{
      tRemain--;
      if (tRemain <= 0){
        clearInterval(tTimerId); tTimerId=null;
        tUI.tLabel.textContent = '00:00';
        handleTimerEnd();
      }else{
        tUI.tLabel.textContent = `${pad(Math.floor(tRemain/60))}:${pad(tRemain%60)}`;
        if (tRemain <= 10){
          playTick();
        }
      }
    },1000);
  }else{
    tUI.tBox.style.display='none';
  }
  advanceWord();
}

function handleTimerEnd(){
  if (!roundActive || timerExpired) return;
  timerExpired=true;
  playAlarm();
  setStatus('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª.');
  if (tUI.next) tUI.next.disabled = true;
}

function lockFinalActions(){
  if (tUI.hit) tUI.hit.disabled = true;
  if (tUI.skip) tUI.skip.disabled = true;
}

function finishRound(){
  if (!roundActive) return;
  clearInterval(tTimerId); tTimerId=null;
  roundActive=false;
  timerExpired=false;
  setRoundControlsEnabled(false);
  if (tUI.endRound){
    tUI.endRound.style.display='none';
  }
  if (tUI.startRound){
    tUI.startRound.style.display='inline-flex';
    tUI.startRound.disabled=false;
  }
  const nextIndex = (turn + 1) % teams.length;
  const nextName = teams[nextIndex]?.name || defaultTeamName(nextIndex);
  turn = nextIndex;
  updateTurnHeader();
  preRoundMessage(nextName, false);
  resetWordView();
  if (teamTimerEnabled){
    tUI.tBox.style.display='inline-flex';
    tRemain = ts.time;
    tUI.tLabel.textContent = `${pad(Math.floor(tRemain/60))}:${pad(tRemain%60)}`;
  }else{
    tUI.tBox.style.display='none';
  }
}

function declareWinner(team){
  clearInterval(tTimerId); tTimerId=null;
  roundActive=false;
  timerExpired=false;
  alert('–ü–æ–±–µ–¥–∞: ' + team.name);
  show('viewMenu');
}

if (tUI.startRound){
  tUI.startRound.onclick = beginRound;
}
if (tUI.endRound){
  tUI.endRound.onclick = finishRound;
}

tUI.next.onclick = ()=>{
  if (!roundActive || timerExpired) return;
  advanceWord();
};
tUI.hideBtn.onclick = ()=>{
  if (!roundActive || tIndex<0) return;
  tHide = !tHide;
  tUI.word.textContent = tHide ? '‚Ä¢‚Ä¢‚Ä¢' : tWords[tIndex];
  tUI.hideBtn.textContent = tHide ? '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ' : '–°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ';
};
tUI.meaning.onclick = ()=>{
  if (!roundActive || tIndex<0) return;
  window.open('https://ru.wikipedia.org/wiki/'+encodeURIComponent(tWords[tIndex]), '_blank');
};

if (tUI.statsBtn){
  tUI.statsBtn.onclick = ()=>{
    if (!teams.length){
      alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞');
      return;
    }
    const blocks = teams.map((team, idx)=>{
      const name = team.name || defaultTeamName(idx);
      const hitList = Array.isArray(team.hitWords) ? team.hitWords : [];
      const missList = Array.isArray(team.missWords) ? team.missWords : [];
      return `–ö–æ–º–∞–Ω–¥–∞ ¬´${name}¬ª\n–£–≥–∞–¥–∞–Ω–Ω—ã–µ (${hitList.length}):\n${formatWordList(hitList)}\n\n–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ (${missList.length}):\n${formatWordList(missList)}`;
    });
    alert(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥\n\n${blocks.join('\n\n')}`);
  };
}

tUI.hit.onclick = ()=>{
  if (!roundActive) return;
  const current = tWords[tIndex];
  if (current) teams[turn].hitWords.push(current);
  teams[turn].hit++;
  if (teamPointsEnabled) teams[turn].points++;
  renderScore();
  persistTeams();
  if (teamPointsEnabled && teams[turn].points >= teamPointGoal){
    declareWinner(teams[turn]);
    return;
  }
  if (timerExpired){
    lockFinalActions();
    return;
  }
  advanceWord();
};
tUI.skip.onclick = ()=>{
  if (!roundActive) return;
  const current = tWords[tIndex];
  if (current) teams[turn].missWords.push(current);
  teams[turn].miss++;
  if (teamPointsEnabled) teams[turn].points--;
  renderScore();
  persistTeams();
  if (timerExpired){
    lockFinalActions();
    return;
  }
  advanceWord();
};


// Helpers
const escapeHtml = str => str
  .replace(/&/g,'&amp;')
  .replace(/</g,'&lt;')
  .replace(/>/g,'&gt;')
  .replace(/"/g,'&quot;')
  .replace(/'/g,'&#39;');
function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]] } return a }

// initial
function restoreInitialView(){
  const stored = readScreenPref();
  if (stored && VIEWS.includes(stored)){
    if (stored === 'viewTeamSetup'){
      ensureTeamsSeed();
      renderTeams();
      syncTeamSettingsFromMenu();
    }
    if (stored === 'viewTeamGame'){
      ensureTeamsSeed();
      renderTeams();
      syncTeamSettingsFromMenu();
      renderScore();
      updateTurnHeader();
      resetWordView();
      setRoundControlsEnabled(false);
      if (tUI.endRound) tUI.endRound.style.display='none';
      if (tUI.startRound){
        tUI.startRound.style.display='inline-flex';
        tUI.startRound.disabled=false;
      }
      if (tUI.tBox) tUI.tBox.style.display = teamTimerEnabled ? 'inline-flex' : 'none';
      setStatus('–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.');
    }
    show(stored);
    return;
  }
  show('viewMenu');
}
restoreInitialView();

if ('serviceWorker' in navigator) {
  let hadController = !!navigator.serviceWorker.controller;

  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./service-worker.js').catch(err => {
      console.warn('Service worker registration failed', err);
    });
  });

  navigator.serviceWorker.addEventListener('controllerchange', () => {
    if (!hadController) {
      hadController = true;
      return;
    }
    window.location.reload();
  });
}
